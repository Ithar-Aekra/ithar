<!DOCTYPE html>
<html lang="fa">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Single-file SPA</title>
<style>
  :root{
    --btn-width:50vw;    /* دکمه‌ی وسط صفحه ورود - 50% عرض */
    --btn-height:15vh;   /* دکمه‌ی وسط صفحه ورود - 15% ارتفاع */
  }
  html,body{height:100%;margin:0;padding:0;direction:rtl;font-family: sans-serif;background:#000;color:#fff}
  #app{width:100vw;height:100vh;overflow:hidden;position:relative}

  /* کانتینر نمایش محتوا (تصویر/ویدیو) */
  .view{
    position:absolute;inset:0;display:flex;align-items:center;justify-content:center;
    background:#000;overflow:hidden;
  }

  /* تصویر قابل زوم/درگ */
  .zoom-img{
    user-select:none; touch-action:none;
    transform-origin: 0 0;
    will-change: transform;
    display:block;
    max-width:none; /* اجازه میدیم بزرگ/کوچک کنیم */
  }

  /* دکمه وسط ورود (طبق خواست: اندازه نسبت به صفحه) */
  #enterBtn{
    position:fixed; left:50%; top:50%;
    transform:translate(-50%,-50%);
    width:var(--btn-width); height:var(--btn-height);
    background:transparent;border:2px solid #fff;border-radius:6px;
    cursor:pointer; z-index:60;
    display:flex;align-items:center;justify-content:center;
    font-size:1.6rem;
  }

  /* ویدیو اینترو (بدون زوم/اسکرول) */
  #introVideo{
    width:100vw;height:100vh;object-fit:contain;background:#000;
  }

  /* صفحه اصلی: تصویر با ویدیوهای چسبیده (absolute) */
  #mainImage{
    user-select:none; touch-action:none;
    transform-origin:0 0; will-change:transform; display:block; max-width:none;
  }
  .floating-video{
    position:absolute; width:150px; height:100px; object-fit:cover; background:#000;
    border:1px solid rgba(255,255,255,0.2); cursor:pointer;
  }

  /* دکمه‌های قابل تنظیم در main */
  .nav-btn{
    position:fixed; z-index:70; cursor:pointer; background:transparent;border:1px solid #fff;
    padding:8px 12px;border-radius:6px;
  }
  /* نمونه موقعیت پیش‌فرض — قابل تغییر در جاوااسکریپت */
  #btnCenter{left:50%;top:50%;transform:translate(-50%,-50%)}
  #btnRight{right:10%;top:50%;transform:translateY(-50%)}

  /* صفحه‌های image-only (page4, page5) از main تبعیت میکنند */
  .hidden{display:none}

  /* راهنمای ساده (در صورت نیاز) */
  .hint{position:fixed;left:8px;bottom:8px;font-size:12px;opacity:.8}
</style>
</head>
<body>
  <div id="app">
    <!-- حالت 1: صفحه ورود (تصویر با زوم/درگ) -->
    <div id="viewIntroImage" class="view">
      <img id="introImg" class="zoom-img" src="assets/imge1.jpg" alt="intro" />
      <button id="enterBtn">ورود</button>
    </div>

    <!-- حالت 2: ویدیو اینترو (بدون زوم/اسکرول) -->
    <div id="viewIntroVideo" class="view hidden">
      <video id="introVideo" src="assets/introvido.mp4" playsinline></video>
    </div>

    <!-- حالت 3: صفحه اصلی (عکس imge2 + ویدیوهای چسبیده + دکمه‌ها) -->
    <div id="viewMain" class="view hidden">
      <img id="mainImage" class="zoom-img" src="assets/imge2.jpg" alt="main" />
      <!-- ویدیوهای چسبیده (منابع اولیه خالی است؛ برای مدیریت حافظه ما src را کنترل می‌کنیم) -->
      <video class="floating-video" id="fv1" data-src="assets/vido1.mp4" muted loop playsinline></video>
      <video class="floating-video" id="fv2" data-src="assets/vido2.mp4" muted loop playsinline></video>
      <video class="floating-video" id="fv3" data-src="assets/vido3.mp4" muted loop playsinline></video>
      <video class="floating-video" id="fv4" data-src="assets/vido4.mp4" muted loop playsinline></video>
      <video class="floating-video" id="fv5" data-src="assets/vido5.mp4" muted loop playsinline></video>
      <video class="floating-video" id="fv6" data-src="assets/vido6.mp4" muted loop playsinline></video>
      <video class="floating-video" id="fv7" data-src="assets/vido7.mp4" muted loop playsinline></video>
      <video class="floating-video" id="fv8" data-src="assets/vido8.mp4" muted loop playsinline></video>

      <!-- دکمه‌ها (موقعیت‌ها در JS قابل تنظیم‌اند) -->
      <button id="btnCenter" class="nav-btn">رفتن به صفحه ۴</button>
      <button id="btnRight" class="nav-btn">رفتن به صفحه ۵</button>
    </div>

    <!-- حالت 4: صفحه ۴ (عکس با زوم/درگ) -->
    <div id="viewPage4" class="view hidden">
      <img id="imgPage4" class="zoom-img" src="assets/imge3.jpg" alt="page4" />
    </div>

    <!-- حالت 5: صفحه ۵ (عکس با زوم/درگ) -->
    <div id="viewPage5" class="view hidden">
      <img id="imgPage5" class="zoom-img" src="assets/imge4.jpg" alt="page5" />
    </div>

    <div class="hint">Esc = برگشت به صفحه قبل</div>
  </div>

<script>
/* ====== مدیریت حالت‌های SPA ====== */
const states = {
  INTRO_IMAGE: 'intro-image',
  INTRO_VIDEO: 'intro-video',
  MAIN: 'main',
  PAGE4: 'page4',
  PAGE5: 'page5'
};
let currentState = states.INTRO_IMAGE;

const showState = (s) => {
  currentState = s;
  // مخفی/نمایش دیدها
  document.getElementById('viewIntroImage').classList.toggle('hidden', s !== states.INTRO_IMAGE);
  document.getElementById('viewIntroVideo').classList.toggle('hidden', s !== states.INTRO_VIDEO);
  document.getElementById('viewMain').classList.toggle('hidden', s !== states.MAIN);
  document.getElementById('viewPage4').classList.toggle('hidden', s !== states.PAGE4);
  document.getElementById('viewPage5').classList.toggle('hidden', s !== states.PAGE5);
};

/* ====== ابزارهای زوم و درگ مشترک برای تصاویر ======
   پیاده‌سازی ساده: اسکرول برای زوم، درگ برای جابجایی
   (این پیاده‌سازی اندازه/محدوده‌ قابل تغییر دارد) */
function makeZoomable(imgElement) {
  let scale = 1, minS = 0.5, maxS = 5;
  let posX = 0, posY = 0;
  let dragging = false, dragStartX = 0, dragStartY = 0, startPosX = 0, startPosY = 0;

  const update = () => {
    imgElement.style.transform = `translate(${posX}px, ${posY}px) scale(${scale})`;
  };

  imgElement.addEventListener('wheel', (ev) => {
    ev.preventDefault();
    const rect = imgElement.getBoundingClientRect();
    const mx = ev.clientX - rect.left;
    const my = ev.clientY - rect.top;
    const delta = ev.deltaY > 0 ? 0.9 : 1.1;
    const prevScale = scale;
    scale = Math.max(minS, Math.min(maxS, scale * delta));
    // جبران موقعیت برای زوم حول نقطه موس
    posX -= (mx / prevScale) * (scale/prevScale - 1);
    posY -= (my / prevScale) * (scale/prevScale - 1);
    update();
  }, {passive:false});

  imgElement.addEventListener('pointerdown', (ev) => {
    ev.preventDefault();
    dragging = true;
    imgElement.setPointerCapture(ev.pointerId);
    dragStartX = ev.clientX; dragStartY = ev.clientY;
    startPosX = posX; startPosY = posY;
  });
  window.addEventListener('pointerup', (ev) => {
    dragging = false;
  });
  window.addEventListener('pointermove', (ev) => {
    if(!dragging) return;
    posX = startPosX + (ev.clientX - dragStartX) / scale;
    posY = startPosY + (ev.clientY - dragStartY) / scale;
    update();
  });

  // تابع برای reset موقعیت/زوم
  return { reset: () => { scale = 1; posX = 0; posY = 0; update(); } };
}

/* ====== Intro image behavior ====== */
const enterBtn = document.getElementById('enterBtn');
const introImg = document.getElementById('introImg');
const introImgController = makeZoomable(introImg);

enterBtn.addEventListener('click', () => {
  showState(states.INTRO_VIDEO);
  playIntroVideo();
});

/* ====== Intro video behavior ====== */
const introVideo = document.getElementById('introVideo');
function playIntroVideo(){
  introVideo.currentTime = 0;
  introVideo.play().catch(()=>{/* auto-play ممکنه بلاک بشه در بعضی مرورگرها */});
}
introVideo.addEventListener('ended', () => showState(states.MAIN));
introVideo.addEventListener('click', () => { introVideo.pause(); showState(states.MAIN); });

/* ====== Main page behavior ====== */
const mainImage = document.getElementById('mainImage');
const mainController = makeZoomable(mainImage);

/* دکمه‌ها (موقعیت‌ها رو اینجا به راحتی عوض کن) */
const btnCenter = document.getElementById('btnCenter');
const btnRight = document.getElementById('btnRight');

/* برای آسانی: مختصات دکمه‌ها رو اینجا میتونی تنظیم کنی (px یا % string) */
const buttonPositions = {
  btnCenter: { left: '50%', top: '50%', transform: 'translate(-50%,-50%)' }, // وسط
  btnRight:  { right: '10%', top: '50%', transform: 'translateY(-50%)' }     // وسط-راست
};
function applyButtonPositions(){
  Object.entries(buttonPositions).forEach(([id, pos])=>{
    const el = document.getElementById(id);
    if(!el) return;
    // پاک کردن موقعیت‌های قبلی
    el.style.left = el.style.right = el.style.top = el.style.bottom = '';
    // اعمال موقعیت جدید
    Object.entries(pos).forEach(([k,v])=>{
      el.style[k] = v;
    });
  });
}
applyButtonPositions();

btnCenter.addEventListener('click', ()=> { showState(states.PAGE4); resetAllZooms(); });
btnRight.addEventListener('click', ()=> { showState(states.PAGE5); resetAllZooms(); });

/* ====== صفحه 4 و 5: تصاویر با زوم/درگ ====== */
const imgPage4 = document.getElementById('imgPage4');
const imgPage5 = document.getElementById('imgPage5');
const page4Controller = makeZoomable(imgPage4);
const page5Controller = makeZoomable(imgPage5);

/* دکمه ESC برای برگشت به حالت قبلی */
window.addEventListener('keydown', (e)=>{
  if(e.key === 'Escape'){
    if(currentState === states.PAGE4 || currentState === states.PAGE5) {
      showState(states.MAIN);
    } else if(currentState === states.MAIN) {
      showState(states.INTRO_IMAGE);
    }
  }
});

/* تابع برای ریست کردن زوم‌ها هنگام تغییر صفحه */
function resetAllZooms(){
  try{ introImgController.reset(); }catch(e){}
  try{ mainController.reset(); }catch(e){}
  try{ page4Controller.reset(); }catch(e){}
  try{ page5Controller.reset(); }catch(e){}
}

/* ====== Floating videos management (lazy load & play/stop) ====== */
const floatingVideos = Array.from(document.querySelectorAll('.floating-video'));

/* موقعیت‌ها و اندازه‌های پیش‌فرض ویدیوها — می‌تونی این آرایه رو ویرایش کنی */
const floatingVideoPositions = [
  {id:'fv1', left:100, top:100, w:150, h:100},
  {id:'fv2', left:300, top:100, w:150, h:100},
  {id:'fv3', left:500, top:100, w:150, h:100},
  {id:'fv4', left:700, top:100, w:150, h:100},
  {id:'fv5', left:100, top:300, w:150, h:100},
  {id:'fv6', left:300, top:300, w:150, h:100},
  {id:'fv7', left:500, top:300, w:150, h:100},
  {id:'fv8', left:700, top:300, w:150, h:100},
];
floatingVideos.forEach(v => {
  const pos = floatingVideoPositions.find(p=>p.id===v.id);
  if(pos){
    v.style.left = pos.left + 'px';
    v.style.top = pos.top + 'px';
    v.style.width = (pos.w || 150) + 'px';
    v.style.height = (pos.h || 100) + 'px';
  }
});

/* تابع که بررسی می‌کند آیا عنصر داخل نمای دید (viewport) هست یا خیر */
function isElementInViewport(el){
  const rect = el.getBoundingClientRect();
  return (
    rect.bottom > 0 &&
    rect.right > 0 &&
    rect.left < window.innerWidth &&
    rect.top < window.innerHeight
  );
}

/* بررسی و مدیریت لود/پخش ویدیوها — اجرا فقط در حالت MAIN */
function manageFloatingVideos(){
  if(currentState !== states.MAIN) {
    // خارج از حالت main همه ویدیوها را متوقف و src حذف کن تا حافظه آزاد شود
    floatingVideos.forEach(v=>{
      if(!v.paused) v.pause();
      if(v.getAttribute('src')){ v.removeAttribute('src'); v.load(); }
    });
    return;
  }
  floatingVideos.forEach(v=>{
    if(isElementInViewport(v)){
      // اگر در دید است و src خالی است، مقداردهی و پخش کن
      if(!v.getAttribute('src')){
        const src = v.dataset.src;
        if(src){
          v.setAttribute('src', src);
          v.load();
          v.play().catch(()=>{ /* اگر autoplay بلاک شد، نگران نباش */ });
        }
      } else {
        // اگر src موجود اما Paused است، پخش کن
        if(v.paused) v.play().catch(()=>{});
      }
    } else {
      // اگر خارج از دید: توقف و حذف src برای آزادسازی حافظه
      if(!v.paused) v.pause();
      if(v.getAttribute('src')){ v.removeAttribute('src'); v.load(); }
    }
  });
}

/* اجرا در اسکرول/resize و هنگام ورود به main */
window.addEventListener('scroll', manageFloatingVideos, {passive:true});
window.addEventListener('resize', manageFloatingVideos);

/* وقتی وارد حالت main شد، یکبار manage فراخوانی کن */
const observer = new MutationObserver(()=> {
  // وقتی تغییر DOM برای دیدن حالت ها رخ داد
  if(currentState === states.MAIN) manageFloatingVideos();
});
observer.observe(document.getElementById('app'), { attributes:false, childList:true, subtree:true });

/* ====== شروع اولیه: نمایش Intro Image ====== */
showState(states.INTRO_IMAGE);

/* اگر بخوای از اول با ویدیو اینترو شروع کنی میتونی این خط رو باز کنی:
showState(states.INTRO_VIDEO); playIntroVideo();
*/

/* ====== کمک برای آپلود به GitHub Pages: راهنمای سریع ======
  1) فایل index.html و پوشه assets را داخل یک فولدر بذار.
  2) به GitHub برو و ریپو بساز.
  3) پوشه و فایل‌ها را آپلود کن (Upload files).
  4) در Settings -> Pages شاخه main و پوشه root را انتخاب کن.
  5) کمی صبر کن و آدرس yourusername.github.io/repo را باز کن.
*/

/* ====== نکته نهایی ======
 - برای تغییر موقعیت دکمه‌ها: متغیر buttonPositions در بالای کد را ویرایش کن.
 - برای تغییر موقعیت/اندازه ویدیوها: آرایه floatingVideoPositions را ویرایش کن.
 - اگر خواستی صفحه4 یا page5 عوض شوند (مثلاً imge5 استفاده شود)، در تگ img مربوطه src را عوض کن.
*/
</script>
</body>
</html>
